{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"APS Documentation","text":"<p>Welcome to the APS (Academic Publishing System) documentation. This site provides all the guidance and references you need for contributing to and understanding APS.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>System Architecture</li> <li>Frontend</li> <li>Backend</li> <li>Authentication</li> <li>Real-Time Updates</li> <li>Deployment</li> </ul>"},{"location":"#article-detail-page","title":"Article Detail Page","text":""},{"location":"#submission-page","title":"Submission Page","text":""},{"location":"architecture/","title":"System Architecture","text":"<p>The APS system is built to streamline article production and tracking. It includes separate components for frontend, backend, and real-time updates.</p>"},{"location":"architecture/#key-points","title":"Key Points","text":"<ul> <li>Frontend: <ul> <li>Framework: React</li> <li>State Management: Redux for managing complex states.</li> <li>Styling: Tailwind CSS for flexible styling.</li> </ul> </li> <li>Backend: <ul> <li>Framework: Node.js with Express.</li> <li>Database: PostgreSQL for structured data.</li> <li>API Development: GraphQL    </li> </ul> </li> <li>File Management: <ul> <li>Storage: Cloud storage options (e.g., AWS S3, Google Cloud Storage) for handling large volumes of manuscript files.</li> <li>File Versioning: Keep each file version accessible to ensure accurate tracking across stages.</li> </ul> </li> <li>Data Security: <ul> <li>User Roles: Authors, Editors, Proofreaders, Production Managers, and Admin.</li> <li>Permissions: Restrict access to specific functions and data based on user roles.</li> </ul> </li> <li> <p>Back-up &amp; Retrieval: </p> <ul> <li>Periodic Backup: Daily, weekly, and monthly backup.</li> <li>Retrieval: 24 hours retrieval in case of any incident.</li> </ul> </li> <li> <p>Authentication and Access Control</p> <ul> <li>OAuth or JWT (JSON Web Tokens) for user authentication, providing secure login and role-based access control.  </li> <li>Identity Management Solutions: For ease, consider using Auth0 or Firebase Authentication to handle complex authentication flows, including multi-factor authentication if required.</li> </ul> </li> <li> <p>Real-Time Features</p> <ul> <li>WebSocket or Server-Sent Events for real-time updates, like notifying users of task changes or article progress.  </li> <li>Frameworks: Socket.IO (for Node.js) or Django Channels if using Django.</li> </ul> </li> <li> <p>DevOps and Deployment</p> <ul> <li>Containerization: Use Docker to package and deploy APS as a set of microservices for scalability.  </li> <li>Orchestration: Kubernetes for scaling and managing containers if expecting high traffic.  </li> <li>Continuous Integration/Continuous Deployment (CI/CD): Tools like GitHub Actions, GitLab CI, or Jenkins to automate testing and deployment.  </li> <li>Hosting: AWS, Google Cloud Platform, or Azure to ensure scalability, with services like Elastic Beanstalk or Kubernetes Engine for seamless scaling.</li> </ul> </li> <li> <p>Observability and Monitoring</p> <ul> <li>Error Tracking: Tools like Sentry or LogRocket to monitor and track application errors.  </li> <li>Application Monitoring: Prometheus and Grafana for monitoring application performance and gathering insights on usage patterns.  </li> <li>Logging: ELK Stack (Elasticsearch, Logstash, Kibana) for centralized logging and analysis, useful in debugging and optimizing performance.</li> </ul> </li> <li> <p>Suggested Project Management Approach</p> <ul> <li>Version Control: Use Git with a remote repository like GitHub or GitLab.  </li> <li>Modular Development: Break down the application into microservices or modular components to improve code reusability and maintenance.  </li> <li>Documentation: Maintain documentation using tools like Sphinx for backend API documentation or Storybook for frontend components.</li> </ul> </li> </ul>"},{"location":"architecture/#final-thoughts","title":"Final Thoughts","text":"<p>This setup will ensure APS is highly configurable, scalable, and aligned with modern development standards. </p>"},{"location":"authentication/","title":"Authentication","text":"<p>The APS supports secure authentication with role-based access.</p>"},{"location":"authentication/#technologies","title":"Technologies","text":"<ul> <li>OAuth or JWT</li> <li>Role-Based Access Control: Controls access by role, such as Author, Editor.</li> </ul>"},{"location":"backend/","title":"Backend","text":"<p>The backend manages data processing, API endpoints, and authentication.</p>"},{"location":"backend/#key-features","title":"Key Features","text":"<ul> <li>Node.js with Express</li> <li>Database Integration: PostgreSQL</li> <li>API Development: GraphQL</li> <li>Storage: AWS S3 or Google Cloud Storage</li> </ul>"},{"location":"deployment/","title":"Deployment","text":"<p>The deployment strategy for APS focuses on scalability and automation.</p>"},{"location":"deployment/#recommended-tools","title":"Recommended Tools","text":"<ul> <li>Docker and Kubernetes for containerization.</li> <li>CI/CD with GitHub Actions or Jenkins.</li> <li>Hosting on AWS, GCP, or Azure.</li> </ul>"},{"location":"frontend/","title":"Frontend: Design and Layout","text":""},{"location":"frontend/#suggested-wireframe-layout","title":"Suggested Wireframe Layout","text":"<p>This section outlines a suggested layout for the key pages in the APS application, aimed at improving usability and transparency across the publication stages.</p>"},{"location":"frontend/#homepagedashboard","title":"Homepage/Dashboard","text":"<p>Displays articles in production, their current stages, and quick-access metrics.</p> <ul> <li>Main Panel: Shows a list or grid of articles with status indicators.</li> <li>Side Panel: Includes filters for sorting articles by author, date, or current stage.</li> </ul>"},{"location":"frontend/#article-detail-page","title":"Article Detail Page","text":"<p>A detailed view of each article's progress and associated tasks, files, and team comments.</p> <ul> <li>Stage Tracker: A visual display that highlights the current stage of the article.</li> <li>Task Panel: Lists tasks associated with the article, including assigned team members, deadlines, and statuses.</li> <li>Comments Section: Allows team members to add notes, instructions, or updates relevant to the article\u2019s progress.</li> </ul>"},{"location":"frontend/#submission-page-for-authors","title":"Submission Page for Authors","text":"<p>A user-friendly form where users (e.g., authors, editors) can upload their manuscript files and enter essential article details.</p>"},{"location":"frontend/#user-profile-task-list","title":"User Profile &amp; Task List","text":"<p>A separate section where users can view: - Their assigned tasks - Associated deadlines - Performance insights</p>"},{"location":"frontend/#workflow-tracking","title":"Workflow Tracking","text":"<p>An interface to set/change the workflow at article level. Option to add or remove steps that an article needs to go through in production process progress.</p>"},{"location":"frontend/#user-experience-design-considerations","title":"User Experience &amp; Design Considerations","text":""},{"location":"frontend/#responsive-design","title":"Responsive Design","text":"<p>Ensure the system is mobile-friendly and accessible on multiple devices, enabling smooth functionality and readability regardless of screen size.</p>"},{"location":"frontend/#user-notifications","title":"User Notifications","text":"<p>Implement alerts to notify users of important updates, such as: - Task completions - New task assignments - Upcoming or missed deadlines</p>"},{"location":"frontend/#analytics-dashboard","title":"Analytics Dashboard","text":"<p>Provide visual insights into key metrics, including: - Average completion time per stage - Task load for each team member - Bottlenecks or delays in the workflow</p>"},{"location":"frontend/#mock-up-html-pages","title":"Mock-Up HTML Pages","text":"<p>Here is a quick preview of the initial mock-up pages:</p> <p>This document provides a foundational guide for user experience and layout considerations in the APS application, ensuring the system remains intuitive, transparent, and easy to navigate.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>Here\u2019s a step-by-step breakdown of how the web application could be structured, along with some core features and design elements.</p>"},{"location":"introduction/#key-components-stages-of-the-system","title":"Key Components &amp; Stages of the System","text":"<ol> <li>Article Submission Portal: A user-friendly interface where authors or editors can upload manuscript files and related documents.  <ul> <li>Features: File upload, metadata input (author details, title, abstract), and automated validation for required fields.  </li> <li>Notifications: Automated email confirmations upon successful submission.  </li> <li>Role-Based Access: Different user roles such as authors, editors, reviewers, and production staff with varying levels of access.  </li> </ul> </li> <li>Workflow Dashboard for Production Stages: An interface for tracking each article through production.  <ul> <li>Stage List: Visual representation of each stage the article will pass through, such as:  <ul> <li>Initial Analysis (check completeness and usability)  </li> <li>Pre-editing (formatting and preparation for the editorial process)  </li> <li>Structural and XML Tagging  </li> <li>Copyediting  </li> <li>Typesetting and Formatting  </li> <li>Proofing and Author Review  </li> </ul> </li> <li>Status Updates: Real-time updates on article status, stage progression, and completion.  </li> <li>Dependencies and Checks: Logic to ensure certain stages can't proceed until specific tasks are completed.  </li> </ul> </li> <li>Task Management &amp; Assignment: For each production stage, specific tasks can be assigned to team members.  <ul> <li>Assignments: Editors, proofreaders, and production staff can be assigned tasks with deadlines.  </li> <li>Automated Notifications: Reminders and alerts for upcoming or overdue tasks.  </li> </ul> </li> <li>Document &amp; File Management: For tracking different versions of documents through production.  <ul> <li>Version Control: Store, retrieve, and manage document versions as they progress through stages.  </li> <li>Centralized Repository: Easy access for users to view the latest version or previous ones if needed.  </li> </ul> </li> <li>Real-Time Tracking and Status Board:  <ul> <li>Tracking Overview: A visual or tabular display that shows where each article is in the production pipeline.  </li> <li>Progress Indicators: Show percentage completion, next steps, and overdue stages if applicable.  </li> </ul> </li> <li>Collaborative Editing &amp; Commenting: Real-time commenting on tasks or files.  <ul> <li>Integrated Notes: Editors and staff can leave notes directly linked to files or specific tasks, which is useful for quick references.  </li> <li>Proof Distribution and Review: Automatically distribute proofs to authors for review and feedback.  </li> </ul> </li> <li>Metrics &amp; Reporting: To assess production times, bottlenecks, and productivity.  <ul> <li>Reporting Tools: Generate reports on production times, task durations, and completion rates for analysis and improvement.</li> </ul> </li> </ol>"},{"location":"real-time-updates/","title":"Real-Time Updates","text":"<p>Real-time updates provide article tracking updates and notifications.</p>"},{"location":"real-time-updates/#technologies","title":"Technologies","text":"<ul> <li>Socket.IO (for Node.js)</li> <li>WebSocket integration</li> </ul>"}]}